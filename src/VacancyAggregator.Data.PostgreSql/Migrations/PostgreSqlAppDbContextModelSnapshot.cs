// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VacancyAggregator.Data;

namespace VacancyAggregator.Data.PostgreSql.Migrations
{
    [DbContext(typeof(PostgreSqlAppDbContext))]
    partial class PostgreSqlAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("VacancyAggregator_Schema")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("VacancyAggregator.Domain.Models.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssemblyPath");

                    b.Property<string>("ConnectionString");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("DataSources");

                    b.HasData(
                        new { Id = 1, IsEnabled = true, Name = "Internal", ShortName = "Inter" }
                    );
                });

            modelBuilder.Entity("VacancyAggregator.Domain.Models.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<int>("DataSourceId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000);

                    b.Property<int>("Experience");

                    b.Property<string>("ExternalId")
                        .IsRequired();

                    b.Property<string>("ExternalUrl")
                        .IsRequired();

                    b.Property<string[]>("KeySkills");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("PublishedAt");

                    b.Property<string>("Schedules");

                    b.Property<int>("Status");

                    b.Property<int>("VacancyFilterId");

                    b.HasKey("Id");

                    b.HasIndex("VacancyFilterId");

                    b.HasIndex("DataSourceId", "ExternalId", "VacancyFilterId")
                        .IsUnique();

                    b.ToTable("Vacancies");

                    b.HasData(
                        new { Id = 1, Area = "moscow", DataSourceId = 1, Description = "first description", Experience = 0, ExternalId = "12", ExternalUrl = "https:\\site.ru", KeySkills = new[] { "c#", "js" }, Name = "first test vacancy", PublishedAt = new DateTime(2022, 6, 10, 8, 49, 55, 203, DateTimeKind.Utc), Schedules = "[]", Status = 0, VacancyFilterId = 1 }
                    );
                });

            modelBuilder.Entity("VacancyAggregator.Domain.Models.VacancyFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<int>("Experience");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("VacancyFilters");

                    b.HasData(
                        new { Id = 1, Experience = 2, Text = "C#" }
                    );
                });

            modelBuilder.Entity("VacancyAggregator.Domain.Models.Vacancy", b =>
                {
                    b.HasOne("VacancyAggregator.Domain.Models.DataSource", "DataSource")
                        .WithMany()
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VacancyAggregator.Domain.Models.VacancyFilter", "VacancyFilter")
                        .WithMany()
                        .HasForeignKey("VacancyFilterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("VacancyAggregator.Domain.Models.Salary", "Salary", b1 =>
                        {
                            b1.Property<int>("VacancyId");

                            b1.Property<int>("Currency");

                            b1.Property<int?>("From");

                            b1.Property<int?>("To");

                            b1.ToTable("Vacancies","VacancyAggregator_Schema");

                            b1.HasOne("VacancyAggregator.Domain.Models.Vacancy")
                                .WithOne("Salary")
                                .HasForeignKey("VacancyAggregator.Domain.Models.Salary", "VacancyId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new { VacancyId = 1, Currency = 0 }
                            );
                        });
                });

            modelBuilder.Entity("VacancyAggregator.Domain.Models.VacancyFilter", b =>
                {
                    b.OwnsOne("VacancyAggregator.Domain.Models.Salary", "Salary", b1 =>
                        {
                            b1.Property<int>("VacancyFilterId");

                            b1.Property<int>("Currency");

                            b1.Property<int?>("From");

                            b1.Property<int?>("To");

                            b1.ToTable("VacancyFilters","VacancyAggregator_Schema");

                            b1.HasOne("VacancyAggregator.Domain.Models.VacancyFilter")
                                .WithOne("Salary")
                                .HasForeignKey("VacancyAggregator.Domain.Models.Salary", "VacancyFilterId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new { VacancyFilterId = 1, Currency = 0 }
                            );
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
